(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'assets'"
p3
sS'layer'
p4
S'/Users/jiangjianghong/Documents/github/web2py1/applications/estore/controllers/giveaway.py'
p5
sS'code'
p6
S'#\ndef index():\n    if request.args:\n        q = db((db.product.id == request.args[0])\n            & (db.product_image.product_id == db.product.id)\n            & (db.product.on_sale == True)\n            )\n        rows = q.select()\n        if rows:\n            response.title = rows[0].product.name\n            return dict(rows=rows,d=rows)\n        else:\n            redirect(URL(\'giveaway\',\'index\'))\n    else:\n        redirect(URL(\'default\',\'freeware\'))\n\ndef productdetails():\n    if request.args:\n        q = db((db.product.id == request.args[0])\n            & (db.inventory.product == db.product.id)\n            & (db.product.on_sale == True)\n            )\n        rows = q.select()\n        if rows:\n            response.title = rows[0].product.name\n            return dict(rows=rows,d=rows)\n        else:\n            redirect(URL(\'giveaway\',\'index\'))\n    else:\n        redirect(URL(\'default\',\'freeware\'))\n\n\n\ndef checkout():\n    # if price_cart()[\'total\'] > 0:\n    if request.args and request.args[0].isdigit():\n        inventory_id = int(request.args[0])\n        inventory = db.inventory(inventory_id)\n        total = inventory.best_price\n        if inventory:\n            product = db.product(inventory.product)\n            response.title="\xe8\xb0\xa2\xe8\xb0\xa2\xe6\x83\xa0\xe9\xa1\xbe\xef\xbc\x8c\xe8\xaf\xb7\xe5\xa1\xab\xe5\x86\x99\xe6\x94\xb6\xe8\xb4\xa7\xe4\xbf\xa1\xe6\x81\xaf"\n            form = SQLFORM(db.cart_order,\n\t\t        formstyle=\'table3cols\',submit_button="\xe5\x85\x8d\xe8\xb4\xb9\xe7\x94\xb3\xe9\xa2\x86"\n\t\t        ).process(dbio=False)\n            if form.accepted:\n\t\t        session.checkout_form = form.vars\n\t\t        session.checkout_form.g_inventory=inventory_id\n\t\t        session.checkout_form.g_product=product.id\n\t\t        session.checkout_form.total=total\n\t\t        redirect(URL(\'pay\'))\n\treturn locals()\n    else:\n        redirect(URL(\'default\',\'index\'))\n\n\ndef cart():\n    if request.vars.id and request.vars.id.isdigit():\n        inventory_id = int(request.vars.id)\n        qty, _, _ = session.cart.get(inventory_id,(0,None,None))\n    \tqty = max(0,qty + 1)\n        inventory = db.inventory(inventory_id)\n        if inventory:\n            product = db.product(inventory.product)\n            session.cart[inventory_id] = [qty, product, inventory]\n            redirect(URL(\'checkout\'))    \t\n    else:\n    \tredirect(URL(\'giveaway\',\'index\')) \n     \n\n\n\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\ndef pay():\n    # from gluon.contrib.stripe import StripeForm\n    import random\n    form = FORM(\n        # INPUT(_name="check",_type="checkbox",_id="confirmorder"),\n        LABEL(\'\xe8\xae\xa2\xe5\x8d\x95\xe5\xb7\xb2\xe6\xa0\xb8\xe5\xaf\xb9\xe6\x97\xa0\xe8\xaf\xaf\'),BR(),\n        INPUT(_type="submit",_value="\xe5\x8e\xbb\xe6\x94\xaf\xe4\xbb\x98\xe5\xae\x9d\xe4\xbb\x98\xe6\xac\xbe",_class="btn btn-success",_id="topay")\n        )\n    dd = (session.checkout_form)\n    total = dd.total\n    form.process()\n    if form.accepted:\n        payment_id = random.randrange(1,90801) \n        order_id = db.cart_order.insert(**dd)\n        db.payment.insert(payment_id=payment_id,cart_order=order_id)\n        invoice_id=db.invoice.insert(description="none",order_id = order_id,payment_id=payment_id,amount=total)\n        # invoice_id = random.randrange(1,9900)\n        d = dict(                \n            invoice=invoice_id,\n            inventory=dd.g_inventory,\n            quantity=1,\n            product=dd.g_product\n            )\n        # db.invoice_item.insert(**db.invoice_item._filter_fields(d))\n        # db.invoice_item.insert(invoice=d[\'invoice\'],quantity=d[\'quantity\'],)\n        db.commit()\n        session.checkout_form.clear()\n        session.order_id = order_id\n        redirect(URL(\'thank_you\'))\n    # elif stripe_form.errors:\n        # redirect(URL(\'pay_error\'))\n    return dict(form=form,dd=session.checkout_form)\n\ndef thank_you():\n    o = db((db.invoice.order_id == session.order_id) & (db.invoice_item.invoice == db.invoice.id)).select(\n            db.invoice.id,db.invoice_item.invoice,db.invoice_item.quantity\n        )\n    s= session\n    return locals()\n\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/Users/jiangjianghong/Documents/github/web2py1/applications/estore/controllers/giveaway.py", line 119, in <module>\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/jiangjianghong/Documents/github/web2py1/applications/estore/controllers/giveaway.py", line 8, in index\n    rows = q.select()\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 10749, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 2472, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 1868, in select\n    sql = self._select(query, fields, attributes)\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 1767, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 1544, in expand\n    out = op(first, second, **optional_args)\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 1382, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 1544, in expand\n    out = op(first, second, **optional_args)\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 1382, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 1544, in expand\n    out = op(first, second, **optional_args)\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 1440, in EQ\n    self.expand(second, first.type))\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 1555, in expand\n    return str(self.represent(expression, field_type))\n  File "/Users/jiangjianghong/documents/github/web2py1/gluon/dal.py", line 2005, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'assets\'\n'
p11
s.